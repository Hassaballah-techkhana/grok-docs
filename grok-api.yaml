openapi: 3.0.0
servers:
  - url: 'https://grok-backend-dev.herokuapp.com'
info:
  version: '1.0'
  title: Grok-Backend
  description: '# These are Grok backend Webservice Endpoints'
  contact:
    name: Abdelrahman Soliman
    email: bebofit@aucegypt.edu
tags:
  - name: Auth
  - name: Users
  - name: Surveys

paths:
  ##############################              Authentication Apis                 ################

  /api/v1/auth/register-mobile:
    post:
      tags:
        - Auth
      description: Allow Users with correct credentials to sign-in into the application
      operationId: userRegisterMobile
      requestBody:
        description: users's info needed to register Mobile
        required: true
        content:
          application/json:
            schema:
              properties:
                mobile:
                  type: string
                  example: '0111112312'
      responses:
        '201':
          description: Created user and send otp
        '409':
          description: mobile number already exists
        '400':
          description: Bad Request, Invalid Schema

  /api/v1/auth/verify-mobile:
    post:
      tags:
        - Auth
      description: verify mobile with otp sent
      operationId: userVerifyMobile
      requestBody:
        description: users's info needed to verify Mobile
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserVerifyMobileRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserVerifyMobileResponse'
        '403':
          description: Wrong otp or mobile number
        '400':
          description: Bad Request, Invalid Schema
        '422':
          description: Mobile not verified

  /api/v1/auth/register-user:
    post:
      tags:
        - Auth
      description: Allow Users with verified mobile to register
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/securitySchemes/bearerAuth'
      operationId: userRegister
      requestBody:
        description: users's info needed to sign-in
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        '200':
          description: OK
        '404':
          description: Didn't find user
        '400':
          description: Bad Request, Invalid Schema
        '401':
          description: Mobile not verified

  /api/v1/auth/login-user:
    post:
      tags:
        - Auth
      description: Allow Users with correct credentials to sign-in into the application
      operationId: usersSignIn
      requestBody:
        description: users's info needed to sign-in
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '401':
          description: User or password are wrong
        '400':
          description: Bad Request, Invalid Schema

  /api/v1/users/{userId}/change-password:
    post:
      tags:
        - Users
      description: Allow Users with correct credentials to change their passwords
      operationId: userChangePassword
      requestBody:
        description: user can change his password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changePasswordRequest'
      parameters:
        - $ref: '#/components/parameters/userIdParam'
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/securitySchemes/bearerAuth'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '404':
          description: Didn't find user
        '403':
          description: current password is not equal to existing password
        '500':
          description: wasn't able to revoke all other refresh tokens

  /api/v1/surveys/:
    get:
      tags:
        - Surveys
      description: Get all survey from Survey Monkey
      operationId: getSurveys
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/securitySchemes/bearerAuth'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSurveysResponse'
          
  /api/v1/surveys/{surveyId}:
    get:
      tags:
        - Surveys
      description: Get survey by Id
      operationId: getSurveyById
      parameters:
        - $ref: '#/components/parameters/surveyIdParam'
        - in: header
          name: Authorization
          schema:
            $ref: '#/components/securitySchemes/bearerAuth'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSurveyByIdResponse'
                
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserLoginRequest:
      type: object
      properties:
        username:
          type: string
          example: '0100213123'
        password:
          type: string
          example: '0100213123'
          minimum: 8
      required:
        - username
        - password

    UserVerifyMobileRequest:
      type: object
      properties:
        mobile:
          type: string
          example: '0100213123'
        otp:
          type: number
          example: 1234
          description: '4 digit number'
      required:
        - mobile
        - otp
    
    UserVerifyMobileResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            mobile:
              type: string
              example: '0100213123'
            isVerified:
              type: boolean
              default: false
            id:
              type: number
              example: 1231231
        accessToken:
          type: string
          example: 'xaavassfassaasca$3'
        refreshToken:
          type: string
          example: 'xaavassfassaasca$3'
      required:
        - refreshToken
        - accessToken
        - user
        
    UserRegisterRequest:
      type: object
      properties:
        mobile:
          type: string
          example: 'johndoo'
          description: 'used to fetch the user'
        username:
          type: string
          example: 'johndoo'
        password:
          type: string
          example: '122323'
        dateOfBirth:
          type: number
          example: 13123123
        gender:
          type: string
          enum: ['M', 'F']
        clientLanguage:
          type: string
          enum: ['en', 'ar']

    UserLoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/user'
        accessToken:
          type: string
          example: 'xaavassfassaasca$3'
        refreshToken:
          type: string
          example: 'xaavassfassaasca$3'
      required:
        - refreshToken
        - accessToken
        - user

    changePasswordRequest:
      type: object
      properties:
        currentPassword:
          type: string
          example: '123124124124123'
        password:
          type: string
          example: 'xaavassfassaasca$3'
      required:
        - refreshToken
        - accessToken
        - user
        
    GetSurveysResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            example: '1111111'
          title:
            type: string
            example: 'Did you like our service'
    
    GetSurveyByIdResponse:
      type: object
      properties:
        pageId:
          type: string
          example: '21211221'
        questions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SurveyTypeEssay'
              - $ref: '#/components/schemas/SurveyTypeRating'
              - $ref: '#/components/schemas/SurveyTypeVerticalTwoCol'

    SurveyTypeEssay:
      type: object
      properties:
        id:
          type: string
          example: '1111111'  
        type:
          type: string
          example: 'essay'
        heading:
          type: string
          example: 'Do you have any other comments?'
        position:
          type: string
          example: '1'
          
    SurveyTypeRating:
      type: object
      properties:
        id:
          type: string
          example: '1111111'  
        type:
          type: string
          example: 'rating'
        heading:
          type: string
          example: 'How likely is it that you would recommend this company to a friend or colleague?'
        position:
          type: string
          example: '2'
        answers:
          type: object
          properties:
            rows:
              type: string
              example: '1111111'
                
            choices:
              type: array
              items:
                type: object
                properties:
                  heading:
                    type: string
                    example: 'Not at all likely - 0'
                  id:
                    type: string
                    example: '1111111'
                    
    SurveyTypeVerticalTwoCol:
      type: object
      properties:
        id:
          type: string
          example: '1111111'  
        type:
          type: string
          example: 'vertical_two_col'
        heading:
          type: string
          example: 'Overall, how satisfied or dissatisfied are you with our company?'
        position:
          type: string
          example: '3'
          
        answers:
          type: object
          properties:
            choices:
              type: array
              items:
                type: object
                properties:
                  heading:
                    type: string
                    example: 'Very satisfied'
                  id:
                    type: string
                    example: '1111111'
                    
              
  ############### Lookups schemas   ####################

    user:
      type: object
      properties:
        email:
          type: string
          example: 'john@doo.com'
        username:
          type: string
          example: 'johndoo'
        dateOfBirth:
          type: number
          description: 'date of birth'
          example: 'date number 23241241'
        mobile:
          type: string
          example: '+2011112455'
        gender:
          type: string
          enum: ['M', 'F']
        clientLanguage:
          type: string
          enum: ['en', 'ar']
        isVerified:
          type: boolean
          example: true
        id:
          type: number
          example: 1231231

  parameters:
    userIdParam:
      in: path
      name: userId
      required: true
      schema:
        type: string
      description: User Identification

    surveyIdParam:
      in: path
      name: surveyId
      required: true
      schema:
        type: string
      description: Survey Identification
